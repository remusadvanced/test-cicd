# This is a basic workflow to help you get started with Actions

 name: CI

# Controls when the workflow will run
 on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
#  pull_request:
#    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

 jobs:
  # This workflow contains a single job called "build"
 build:
    # The type of runner that the job will run on
 runs-on: self-hosted

    # Steps represent a sequence of tasks that will be executed as part of the job
 steps:
    # Steps represent a sequence of tasks that will be executed as part of the job
       - name: Set up JDK 11
         uses: actions/setup-java@v1
         with:
           java-version: 1.11
       - uses: actions/checkout@v2
         with:
           fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
       - uses: actions/checkout@v2
       - name: Setup .NET
         uses: actions/setup-dotnet@v1
         with:
           dotnet-version: '6.0.x'
           include-prerelease: true

       - name: Build with dotnet
         run: dotnet build ./aspnetapp.sln --configuration Release
        
       - name: Cache SonarQube packages
         uses: actions/cache@v1
         with:
           path: ~\sonar\cache
           key: ${{ runner.os }}-sonar
           restore-keys: ${{ runner.os }}-sonar
       - name: Cache SonarQube scanner
         id: cache-sonar-scanner
         uses: actions/cache@v1
         with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
       - name: Install SonarQube scanner
         if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
         shell: pwsh
         run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
       - name: Build and analyze

#         shell: pwsh
#         run: |
#          .\.sonar\scanner\dotnet-sonarscanner begin /k:"cicd-test-key" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="http://localhost:9000"
#          dotnet build ./aspnetapp.sln --configuration Release
#          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
     
#### Build Docker image
      - name: Docker build aspnet
        shell: pwsh
        run: | 
          docker build -f "C:\aspnet\Dockerfile" -t remusadvanced/appmod-devops:0.0.${{GITHUB.RUN_NUMBER }} .
          docker login -u "${{ secrets.CONTAINER_REPO_USERNAME }}" -p "${{ secrets.CONTAINER_REPO_PASSWORD }}"
          docker push remusadvanced/appmod-devops:0.0.${{GITHUB.RUN_NUMBER }}
 
     
#### Create a task definition in AWS ECS 

      - name: Update the task definition
        shell: pwsh
        run: | 
          aws ecs register-task-definition --runtime-platform operatingSystemFamily="LINUX" --family "aspnetapp" --task-role-arn "arn:aws:iam::069705096352:role/ecsTaskExecutionRole" --execution-role-arn "arn:aws:iam::069705096352:role/ecsTaskExecutionRole" --network-mode "awsvpc" --requires-compatibilities "FARGATE" --cpu 256 --memory 512 --container-definitions '"[{\"portMappings\": [{\"hostPort\": 80,\"protocol\": \"tcp\",\"containerPort\": 80}],\"cpu\": 0, \"memory\": 10,\"image\": \"docker.io/remusadvanced/appmod-devops:0.0.${{ GITHUB.RUN_NUMBER }}\",\"name\": \"aspnetapp\"}]"'

